// Colors
// Greys
$colorGrey100: #000000;
$colorGrey90: #333333;
$colorGrey80: #4c4c4c;
$colorGrey70: #666666;
$colorGrey60: #7f7f7f;
$colorGrey50: #999999;
$colorGrey40: #b2b2b2;
$colorGrey30: #cccccc;
$colorGrey20: #e5e5e5;
$colorGrey10: #f2f2f2;
$colorGrey0: #ffffff;
// Accents
$colorAccent1: #3cc0d0;
$colorAccent2: #ff9324;
$colorAccent3: #526676;
$colorAccent4: #cfdbe1;
// Accents hover
$colorAccentHover1: #77D5E1;
$colorAccentHover2: #FFA548;
$colorAccentHover3: #698399;
// Additional
$colorBrown: #d1cabb;
$colorBrownLight: #f3ecdd;
$colorRed: #ecc1b4;
$colorRedLight: #f9d6cb;
$colorGreen: #b7d2a2;
$colorGreenLight: #daf0c9;
$colorPurple: #bbabc2;
$colorPurpleLight: #dbcfe0;
$colorBlue: #add5e9;
$colorBlueLight: #daeffa;
// Alert
$colorError: #ff0000;
$colorErrorLight: #ffefef;

// Constants
$radius: 5px;

// Breakpoints
$breakpoints: (
	'mobile': (
		max-width: 767px,
	),
	'tablet': (
		min-width: 768px,
	),
	'desk': (
		min-width: 1440px,
	),
) !default;

/// Mixin to manage responsive breakpoints
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin ss($breakpoint) {
	// If the key exists in the map
	@if map-has-key($breakpoints, $breakpoint) {
		// Prints a media query based on the value
		@media #{inspect(map-get($breakpoints, $breakpoint))} {
			@content;
		}
	}

	// If the key doesn't exist in the map
	@else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
	}
}
